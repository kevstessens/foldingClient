var CSSParseError = function(msg, source, line, column) {
    this.message = msg + ' at line #' + line;
    this.description = build(this.message, source, line, column);
};

CSSParseError.prototype = new Error();
CSSParseError.prototype.type = 'CSSParseError';

function build(msg, source, line, column) {
    function repeat(sym, count) {
        return new Array(count + 1).join(sym);
    }
    function pad(val, sym) {
        return repeat(' ', numWidth - String(val).length) + val;
    }

    var lines = source.split(/\r*\n\r*/);
    var numWidth = String(Math.max(line + 2, lines.length)).length + 1;
    var startLine = Math.max(line - 3, 0);
    var viewLines = lines.slice(startLine, line + 2);

    return viewLines.map(function(str, idx) {
        var num = startLine + idx + 1;

        str = pad(num) + ' | ' + str;

        if (num === line) {
            str += '\n' + repeat('-', numWidth + 3 + column - 1) + '^';
        }
        return str;
    }).join('\n');
}

module.exports = CSSParseError;
